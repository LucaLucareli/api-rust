name: Rust CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Job de Build e Testes
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install SQL Server tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list
        apt-get update
        ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev

    - name: Wait for SQL Server
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q "SELECT 1" -t 30
        sleep 10

    - name: Create database
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q "CREATE DATABASE rust_cast_db"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -d rust_cast_db -i schema.sql

    - name: Setup environment
      run: |
        cp env.example .env
        echo "DATABASE_URL=sqlserver://localhost:1433/rust_cast_db" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "JWT_ACCESS_SECRET=test-secret-key" >> .env
        echo "JWT_REFRESH_SECRET=test-refresh-key" >> .env

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features
      env:
        DATABASE_URL: sqlserver://localhost:1433/rust_cast_db
        REDIS_URL: redis://localhost:6379

    - name: Build release
      run: cargo build --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rust-build
        path: target/release/

  # Job de AnÃ¡lise de SeguranÃ§a
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Job de AnÃ¡lise de Qualidade
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check dependencies
      run: cargo tree

  # Job de Deploy (apenas na main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security, quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: rust-build

    - name: Deploy to server
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "âœ… Build artifacts downloaded successfully"
        echo "ðŸ“¦ Ready for deployment"
        # Aqui vocÃª pode adicionar comandos para deploy real
        # como upload para servidor, container registry, etc.
