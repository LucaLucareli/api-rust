#!/bin/bash

# Pipeline Bash para API Rust Monorepo
# Uso: ./pipeline.sh [comando]

set -e  # Exit on error

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fun√ß√£o para mostrar mensagens coloridas
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    print_color $GREEN "üöÄ API Rust Monorepo - Comandos dispon√≠veis:"
    echo ""
    print_color $YELLOW "  build          - Compila o projeto em modo debug"
    print_color $YELLOW "  build-release  - Compila o projeto em modo release"
    print_color $YELLOW "  test           - Executa todos os testes"
    print_color $YELLOW "  clean          - Remove arquivos de build"
    print_color $YELLOW "  fmt            - Formata o c√≥digo"
    print_color $YELLOW "  fmt-check      - Verifica formata√ß√£o do c√≥digo"
    print_color $YELLOW "  clippy         - Executa clippy (linter)"
    print_color $YELLOW "  check          - Executa todas as verifica√ß√µes"
    print_color $YELLOW "  lint           - Formata e executa clippy"
    print_color $YELLOW "  security       - Verifica vulnerabilidades"
    print_color $YELLOW "  docker-build   - Constr√≥i imagem Docker"
    print_color $YELLOW "  docker-run     - Executa container Docker"
    print_color $YELLOW "  docker-stop    - Para container Docker"
    print_color $YELLOW "  dev            - Inicia modo desenvolvimento"
    print_color $YELLOW "  pipeline       - Executa pipeline completo"
    print_color $YELLOW "  validate       - Valida c√≥digo para produ√ß√£o"
    print_color $YELLOW "  status         - Mostra status do projeto"
    print_color $YELLOW "  install-tools  - Instala ferramentas"
    print_color $YELLOW "  help           - Mostra esta ajuda"
    echo ""
}

# Fun√ß√£o para verificar se o Rust est√° instalado
check_rust() {
    if command -v rustc &> /dev/null && command -v cargo &> /dev/null; then
        local rust_version=$(rustc --version)
        local cargo_version=$(cargo --version)
        print_color $GREEN "‚úÖ Rust instalado: $rust_version"
        print_color $GREEN "‚úÖ Cargo instalado: $cargo_version"
        return 0
    else
        print_color $RED "‚ùå Rust n√£o est√° instalado ou n√£o est√° no PATH"
        print_color $YELLOW "Instale o Rust em: https://rustup.rs/"
        return 1
    fi
}

# Fun√ß√£o para build
build_project() {
    print_color $GREEN "üî® Compilando projeto..."
    if cargo build; then
        print_color $GREEN "‚úÖ Compila√ß√£o conclu√≠da!"
    else
        print_color $RED "‚ùå Erro na compila√ß√£o"
        exit 1
    fi
}

# Fun√ß√£o para build release
build_release() {
    print_color $GREEN "üöÄ Compilando projeto em modo release..."
    if cargo build --release; then
        print_color $GREEN "‚úÖ Compila√ß√£o release conclu√≠da!"
    else
        print_color $RED "‚ùå Erro na compila√ß√£o release"
        exit 1
    fi
}

# Fun√ß√£o para testes
test_project() {
    print_color $GREEN "üß™ Executando testes..."
    if cargo test; then
        print_color $GREEN "‚úÖ Testes conclu√≠dos!"
    else
        print_color $RED "‚ùå Erro nos testes"
        exit 1
    fi
}

# Fun√ß√£o para limpeza
clean_project() {
    print_color $YELLOW "üßπ Limpando arquivos de build..."
    cargo clean
    print_color $GREEN "‚úÖ Limpeza conclu√≠da!"
}

# Fun√ß√£o para formata√ß√£o
format_code() {
    print_color $GREEN "üé® Formatando c√≥digo..."
    if cargo fmt --all; then
        print_color $GREEN "‚úÖ Formata√ß√£o conclu√≠da!"
    else
        print_color $RED "‚ùå Erro na formata√ß√£o"
        exit 1
    fi
}

# Fun√ß√£o para verificar formata√ß√£o
check_format() {
    print_color $GREEN "üîç Verificando formata√ß√£o..."
    if cargo fmt --all -- --check; then
        print_color $GREEN "‚úÖ Formata√ß√£o OK!"
    else
        print_color $RED "‚ùå Formata√ß√£o incorreta"
        exit 1
    fi
}

# Fun√ß√£o para clippy
run_clippy() {
    print_color $GREEN "üîç Executando clippy..."
    if cargo clippy --all-targets --all-features -- -D warnings; then
        print_color $GREEN "‚úÖ Clippy OK!"
    else
        print_color $RED "‚ùå Clippy encontrou problemas"
        exit 1
    fi
}

# Fun√ß√£o para verifica√ß√£o de seguran√ßa
check_security() {
    print_color $GREEN "üîí Verificando seguran√ßa..."
    if command -v cargo-audit &> /dev/null; then
        if cargo audit; then
            print_color $GREEN "‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da!"
        else
            print_color $YELLOW "‚ö†Ô∏è Vulnerabilidades encontradas"
        fi
    else
        print_color $YELLOW "‚ö†Ô∏è cargo-audit n√£o est√° instalado"
        print_color $YELLOW "Instale com: cargo install cargo-audit"
    fi
}

# Fun√ß√£o para Docker
build_docker() {
    print_color $GREEN "üê≥ Construindo imagem Docker..."
    if docker build -t api-rust:latest .; then
        print_color $GREEN "‚úÖ Imagem Docker constru√≠da!"
    else
        print_color $RED "‚ùå Erro na constru√ß√£o Docker"
        exit 1
    fi
}

start_docker() {
    print_color $GREEN "üöÄ Iniciando container Docker..."
    docker-compose up -d
    print_color $GREEN "‚úÖ Container iniciado!"
}

stop_docker() {
    print_color $YELLOW "‚èπÔ∏è Parando container Docker..."
    docker-compose down
    print_color $GREEN "‚úÖ Container parado!"
}

# Fun√ß√£o para desenvolvimento
start_dev() {
    print_color $GREEN "üîÑ Iniciando modo desenvolvimento..."
    cargo run
}

# Fun√ß√£o para pipeline completo
run_pipeline() {
    print_color $GREEN "üöÄ Executando pipeline completo..."
    clean_project
    check_format
    run_clippy
    test_project
    build_release
    print_color $GREEN "üéâ Pipeline completo executado com sucesso!"
}

# Fun√ß√£o para valida√ß√£o
validate_code() {
    print_color $GREEN "üéØ Validando c√≥digo para produ√ß√£o..."
    check_format
    run_clippy
    check_security
    test_project
    build_release
    print_color $GREEN "üéØ C√≥digo validado para produ√ß√£o!"
}

# Fun√ß√£o para status
show_status() {
    print_color $GREEN "üìä Status do Projeto:"
    if command -v rustc &> /dev/null; then
        local rust_version=$(rustc --version)
        local cargo_version=$(cargo --version)
        echo "Rust version: $rust_version"
        echo "Cargo version: $cargo_version"
        
        # Verificar sistema operacional
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            echo "Sistema: Linux"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Sistema: macOS"
        else
            echo "Sistema: $OSTYPE"
        fi
        
        print_color $GREEN "‚úÖ Status verificado!"
    else
        print_color $RED "‚ùå Erro ao verificar status"
    fi
}

# Fun√ß√£o para instalar ferramentas
install_tools() {
    print_color $GREEN "üì¶ Instalando ferramentas..."
    if cargo install cargo-watch && \
       cargo install cargo-tarpaulin && \
       cargo install cargo-audit && \
       cargo install cargo-deny; then
        print_color $GREEN "‚úÖ Ferramentas instaladas!"
    else
        print_color $RED "‚ùå Erro ao instalar ferramentas"
    fi
}

# Main execution
print_color $GREEN "üöÄ API Rust Monorepo - Pipeline Bash"
echo "============================================="

# Verificar instala√ß√£o do Rust
if ! check_rust; then
    exit 1
fi

# Obter comando (padr√£o: help)
COMMAND=${1:-help}

# Executar comando solicitado
case $COMMAND in
    "build")
        build_project
        ;;
    "build-release")
        build_release
        ;;
    "test")
        test_project
        ;;
    "clean")
        clean_project
        ;;
    "fmt")
        format_code
        ;;
    "fmt-check")
        check_format
        ;;
    "clippy")
        run_clippy
        ;;
    "check")
        check_format
        run_clippy
        print_color $GREEN "‚úÖ Todas as verifica√ß√µes passaram!"
        ;;
    "lint")
        format_code
        run_clippy
        print_color $GREEN "‚úÖ Linting conclu√≠do!"
        ;;
    "security")
        check_security
        ;;
    "docker-build")
        build_docker
        ;;
    "docker-run")
        start_docker
        ;;
    "docker-stop")
        stop_docker
        ;;
    "dev")
        start_dev
        ;;
    "pipeline")
        run_pipeline
        ;;
    "validate")
        validate_code
        ;;
    "status")
        show_status
        ;;
    "install-tools")
        install_tools
        ;;
    "help")
        show_help
        ;;
    *)
        print_color $RED "‚ùå Comando desconhecido: $COMMAND"
        show_help
        exit 1
        ;;
esac
